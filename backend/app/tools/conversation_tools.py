from typing import Any, Optional, List, Callable
from app.config.prompts import roleplay_prompt, conversation_feedback_prompt, fall_to_gemini_prompt

class ConversationTools:
    def __init__(self, llm: Optional[Any] = None):
        self.llm = llm

    def get_tools(self) -> List[Callable]:
        return [
            self.conversation_feedback_tool,
            self.roleplay_tool,
        ]

    def conversation_feedback_tool(self, user_input: str = "") -> str:
        """
        Provides feedback on the user's conversation.

        Args:
            user_input (str): The user's input to the conversation.

        Returns:
            str: The response generated by the language model.
        """
        print(333333333333333333)
        return self._run_tool(conversation_feedback_prompt, user_input)

    def roleplay_tool(self, user_input: str = "") -> str:
        """
        Engages in a roleplay conversation based on a given topic, context, and AI role.

        Args:
            user_input (str): The user's input to the conversation.

        Returns:
            str: The response generated by the language model.
        """
        print(222222222222222222)
        return self._run_tool(roleplay_prompt, user_input)
    
    def fallback_to_gemini(self, user_input: str = "") -> str:
        """
        Answers general questions.

        Args:
            user_input (str): The user's input to the conversation.

        Returns:
            str: The response generated by the language model.
        """
        print(111111111111111111)
        return self._run_tool(fall_to_gemini_prompt, user_input)
